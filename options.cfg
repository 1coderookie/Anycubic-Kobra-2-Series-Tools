#------------------------------------------------------------------------------------------------
# 'options.cfg' is the default configuration file used by 'patch.sh'
# You can provide another configuration file as a parameter to 'patch.sh'
# All available patching options are listed below
# Disable patching an option by using '#' or ';' as a first caracter in the option line
# Use single or double quotes for the option value. Do not use spaces inside the quotes.
# Use list of values separated by a space if needed because suplicated option are not supported
# In square brackets you may place the name(s) of other option(s) required by a given option. 
# This will not auto include the required option(s) but will be used to validate the option integrity.
#-------------------------------------------------------------------------------------------------

# Enable the custom updates by using the provided public key
# @ will be replaced by the working folder root
# Use the provided example of public and private keys or generate your own:
# Use 'openssl genrsa -out swupdate_private.pem' to generate a private key
# Use 'openssl rsa -in swupdate_private.pem -out swupdate_public.pem -outform PEM -pubout' to export the public key
# Place both keys (swupdate_private.pem and swupdate_public.pem) in the folder RESOURCES/KEYS
custom_update="@/RESOURCES/KEYS/swupdate_public.pem"

# Enable root access by providing a custom root password hash (default password 'toor')
# Providing an empty string will allow root access without a password (not recommended)
root_access="$1$///xTLYF$krWXTe62/dm.crd6CH4HW0"

# Enable the UART at boot for access the uboot shell and for root login
# Use uboot from version '2.3.9' (recommended)
# From version 3.0.3 the UART is disabled
uart="2.3.9"

# Enable the SSH server, use 'dropbear' type ssh (recommended)
ssh="dropbear"

# Enable opkg (+5MB to the update, +10MB to the rootfs)
#opkg="default"

# Enable custom webcam support. Use 'default' package. Support for firmware ver 3.0.9+ only
# When you need remote video monitoring from ssh shell execute 'camera.py' to start the webserver
# It requires a compatible USB camera to be inserted in any of the USB slots
# From your browser navigate to: http://your_printer_address:8000
# Use CTRL-C or close the ssh shell to stop the webserver
#webcam="default"

# Webcam cli tool for taking pictures from connected USB webcam
#fswebcam="default"

# Enable the web interface Kobra Unleashed
# More information: https://github.com/anjomro/kobra-unleashed
# Replace the URL below with the URL of your MQTT server
# You also need to transfer to the printer your keys in
# the /user folder by ssh as explained in the project page
#kobra_unleashed="localhost.mr-a.de"

# Replace some of the app images
#app_images="set1"

# Replace the boot logo
#boot_resource="kangaroo"

# Add a startup script
#startup_script="startup.sh"
